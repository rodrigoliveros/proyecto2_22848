
proyecto_2_22848.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000d52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cde  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800100  00800100  00000d52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013b2  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000834  00000000  00000000  0000225a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008dd  00000000  00000000  00002a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  0000336c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004db  00000000  00000000  00003610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000996  00000000  00000000  00003aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00004481  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 31       	cpi	r26, 0x14	; 20
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 93 00 	call	0x126	; 0x126 <main>
  88:	0c 94 6d 06 	jmp	0xcda	; 0xcda <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_init>:
		
		}//switch_case
	}//while
}//main
void ADC_init(void){
	ADMUX |= (1<<REFS0);	// VCC REF
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  9a:	80 81       	ld	r24, Z
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	80 83       	st	Z, r24
	ADMUX &= ~(1<<ADLAR);	// 10 bits
  a0:	80 81       	ld	r24, Z
  a2:	8f 7d       	andi	r24, 0xDF	; 223
  a4:	80 83       	st	Z, r24
	// PRESCALER 128 > 16M/128 = 125KHz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);	// ADC ON
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <adcRead>:
}
uint16_t adcRead(uint8_t canal){
	ADMUX = (ADMUX & 0xF0)|canal;	// selección de canal
  b8:	ec e7       	ldi	r30, 0x7C	; 124
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	90 81       	ld	r25, Z
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	89 2b       	or	r24, r25
  c2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);	// inicia conversión
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	80 83       	st	Z, r24
	while((ADCSRA)&(1<<ADSC));	// hasta finalizar conversión
  ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d2:	86 fd       	sbrc	r24, 6
  d4:	fc cf       	rjmp	.-8      	; 0xce <adcRead+0x16>
	return(ADC);
  d6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  da:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  de:	08 95       	ret

000000e0 <ExtInt_init>:
void ExtInt_init(void){
	//CONFIGURADO PARA PD2
	EICRA |= (1<< ISC00)|(1 << ISC01);
  e0:	e9 e6       	ldi	r30, 0x69	; 105
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	83 60       	ori	r24, 0x03	; 3
  e8:	80 83       	st	Z, r24
	DDRD &= ~(1 << DDD2);
  ea:	8a b1       	in	r24, 0x0a	; 10
  ec:	8b 7f       	andi	r24, 0xFB	; 251
  ee:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << DDD2);
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	84 60       	ori	r24, 0x04	; 4
  f4:	8b b9       	out	0x0b, r24	; 11
	EIMSK |= (1 << INT0);
  f6:	8d b3       	in	r24, 0x1d	; 29
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	8d bb       	out	0x1d, r24	; 29
  fc:	08 95       	ret

000000fe <Botones_init>:
}
void Botones_init(void) {//de entrada
	
	DDRD &= ~(1<<DDD3);	
  fe:	8a b1       	in	r24, 0x0a	; 10
 100:	87 7f       	andi	r24, 0xF7	; 247
 102:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<DDD4);		
 104:	8a b1       	in	r24, 0x0a	; 10
 106:	8f 7e       	andi	r24, 0xEF	; 239
 108:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<DDD3)|(1<<DDD4);		//PD3 y PD5 se inicializan en 0
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	88 61       	ori	r24, 0x18	; 24
 10e:	8b b9       	out	0x0b, r24	; 11

	PCMSK2 |= (1<<DDD3)|(1<<DDD4);
 110:	ed e6       	ldi	r30, 0x6D	; 109
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	88 61       	ori	r24, 0x18	; 24
 118:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE2);
 11a:	e8 e6       	ldi	r30, 0x68	; 104
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	84 60       	ori	r24, 0x04	; 4
 122:	80 83       	st	Z, r24
 124:	08 95       	ret

00000126 <main>:
int flag = 0;

int main(void)
{
	
	DDRD = 0xFF;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	8a b9       	out	0x0a, r24	; 10
	DIDR0 |= (1 << ADC3D) | (1 << ADC2D) | (1 << ADC1D) | (1 << ADC0D);
 12a:	ee e7       	ldi	r30, 0x7E	; 126
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8f 60       	ori	r24, 0x0F	; 15
 132:	80 83       	st	Z, r24
	DDRB |= (1 << DDB3) | (1 << DDB4);
 134:	84 b1       	in	r24, 0x04	; 4
 136:	88 61       	ori	r24, 0x18	; 24
 138:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << PORTB3);
 13a:	85 b1       	in	r24, 0x05	; 5
 13c:	87 7f       	andi	r24, 0xF7	; 247
 13e:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << PORTB4);
 140:	85 b1       	in	r24, 0x05	; 5
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	85 b9       	out	0x05, r24	; 5
	state = 0;
 146:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state+0x1>
 14a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
	ADC_init();
 14e:	0e 94 48 00 	call	0x90	; 0x90 <ADC_init>
	PWM_init();
 152:	0e 94 fd 02 	call	0x5fa	; 0x5fa <PWM_init>
	PWM0_init();
 156:	0e 94 19 03 	call	0x632	; 0x632 <PWM0_init>
	ExtInt_init();
 15a:	0e 94 70 00 	call	0xe0	; 0xe0 <ExtInt_init>
	Botones_init();
 15e:	0e 94 7f 00 	call	0xfe	; 0xfe <Botones_init>
	sei();
 162:	78 94       	sei

	while (1)
	{	
		
		switch(state){
 164:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
 168:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <state+0x1>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	91 05       	cpc	r25, r1
 170:	09 f4       	brne	.+2      	; 0x174 <main+0x4e>
 172:	7a c0       	rjmp	.+244    	; 0x268 <main+0x142>
 174:	34 f4       	brge	.+12     	; 0x182 <main+0x5c>
 176:	00 97       	sbiw	r24, 0x00	; 0
 178:	61 f0       	breq	.+24     	; 0x192 <main+0x6c>
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	09 f4       	brne	.+2      	; 0x180 <main+0x5a>
 17e:	70 c0       	rjmp	.+224    	; 0x260 <main+0x13a>
 180:	a0 c0       	rjmp	.+320    	; 0x2c2 <main+0x19c>
 182:	83 30       	cpi	r24, 0x03	; 3
 184:	91 05       	cpc	r25, r1
 186:	09 f4       	brne	.+2      	; 0x18a <main+0x64>
 188:	76 c0       	rjmp	.+236    	; 0x276 <main+0x150>
 18a:	04 97       	sbiw	r24, 0x04	; 4
 18c:	09 f4       	brne	.+2      	; 0x190 <main+0x6a>
 18e:	7a c0       	rjmp	.+244    	; 0x284 <main+0x15e>
 190:	98 c0       	rjmp	.+304    	; 0x2c2 <main+0x19c>
			
			case 0:
			
				PORTB &= ~(1 << PORTB3);
 192:	85 b1       	in	r24, 0x05	; 5
 194:	87 7f       	andi	r24, 0xF7	; 247
 196:	85 b9       	out	0x05, r24	; 5
				PORTB &= ~(1 << PORTB4);
 198:	85 b1       	in	r24, 0x05	; 5
 19a:	8f 7e       	andi	r24, 0xEF	; 239
 19c:	85 b9       	out	0x05, r24	; 5
				
				adcValue1 = adcRead(0);
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 1a4:	bc 01       	movw	r22, r24
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 5c 05 	call	0xab8	; 0xab8 <__floatunsisf>
 1ae:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <adcValue1>
 1b2:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <adcValue1+0x1>
 1b6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <adcValue1+0x2>
 1ba:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <adcValue1+0x3>
				servo_writeA(adcValue1);
 1be:	0e 94 88 03 	call	0x710	; 0x710 <servo_writeA>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	8f e3       	ldi	r24, 0x3F	; 63
 1c4:	9c e9       	ldi	r25, 0x9C	; 156
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0xa0>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0xa6>
 1cc:	00 00       	nop
				_delay_ms(10);
				adcValue2 = adcRead(1);
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 1d4:	bc 01       	movw	r22, r24
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 5c 05 	call	0xab8	; 0xab8 <__floatunsisf>
 1de:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <adcValue2>
 1e2:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <adcValue2+0x1>
 1e6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <adcValue2+0x2>
 1ea:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <adcValue2+0x3>
				servo_writeB(adcValue2);
 1ee:	0e 94 bb 03 	call	0x776	; 0x776 <servo_writeB>
 1f2:	8f e3       	ldi	r24, 0x3F	; 63
 1f4:	9c e9       	ldi	r25, 0x9C	; 156
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <main+0xd0>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0xd6>
 1fc:	00 00       	nop
				_delay_ms(10);
				adcValue3 = adcRead(2);
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 204:	bc 01       	movw	r22, r24
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 5c 05 	call	0xab8	; 0xab8 <__floatunsisf>
 20e:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <adcValue3>
 212:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <adcValue3+0x1>
 216:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <adcValue3+0x2>
 21a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <adcValue3+0x3>
				servo_writeC(adcValue3);
 21e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <servo_writeC>
 222:	8f e3       	ldi	r24, 0x3F	; 63
 224:	9c e9       	ldi	r25, 0x9C	; 156
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <main+0x100>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x106>
 22c:	00 00       	nop
				_delay_ms(10);
				adcValue4 = adcRead(3);
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 234:	bc 01       	movw	r22, r24
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 5c 05 	call	0xab8	; 0xab8 <__floatunsisf>
 23e:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <adcValue4>
 242:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <adcValue4+0x1>
 246:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adcValue4+0x2>
 24a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adcValue4+0x3>
				servo_writeD(adcValue4);
 24e:	0e 94 1e 04 	call	0x83c	; 0x83c <servo_writeD>
 252:	8f e3       	ldi	r24, 0x3F	; 63
 254:	9c e9       	ldi	r25, 0x9C	; 156
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <main+0x130>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0x136>
 25c:	00 00       	nop
 25e:	82 cf       	rjmp	.-252    	; 0x164 <main+0x3e>
				_delay_ms(10);
				
				break;
			
			case 1: //Guardar
				PORTB |= (1 << PORTB3);
 260:	85 b1       	in	r24, 0x05	; 5
 262:	88 60       	ori	r24, 0x08	; 8
 264:	85 b9       	out	0x05, r24	; 5
				break;	
 266:	7e cf       	rjmp	.-260    	; 0x164 <main+0x3e>
				
			case 2: //Reproducir
				PORTB |= (1 << PORTB4);
 268:	85 b1       	in	r24, 0x05	; 5
 26a:	80 61       	ori	r24, 0x10	; 16
 26c:	85 b9       	out	0x05, r24	; 5
				PORTB &= ~(1 << PORTB3);
 26e:	85 b1       	in	r24, 0x05	; 5
 270:	87 7f       	andi	r24, 0xF7	; 247
 272:	85 b9       	out	0x05, r24	; 5
				break;
 274:	77 cf       	rjmp	.-274    	; 0x164 <main+0x3e>
			
			case 3: //Borrar
				PORTB |= (1 << PORTB3);
 276:	85 b1       	in	r24, 0x05	; 5
 278:	88 60       	ori	r24, 0x08	; 8
 27a:	85 b9       	out	0x05, r24	; 5
				PORTB |= (1 << PORTB4);
 27c:	85 b1       	in	r24, 0x05	; 5
 27e:	80 61       	ori	r24, 0x10	; 16
 280:	85 b9       	out	0x05, r24	; 5
				break;
 282:	70 cf       	rjmp	.-288    	; 0x164 <main+0x3e>
				
			case 4: //Adafruit
				PORTB |= (1 << PORTB4);
 284:	85 b1       	in	r24, 0x05	; 5
 286:	80 61       	ori	r24, 0x10	; 16
 288:	85 b9       	out	0x05, r24	; 5
				PORTB |= (1 << PORTB3);
 28a:	85 b1       	in	r24, 0x05	; 5
 28c:	88 60       	ori	r24, 0x08	; 8
 28e:	85 b9       	out	0x05, r24	; 5
 290:	9f ef       	ldi	r25, 0xFF	; 255
 292:	29 e6       	ldi	r18, 0x69	; 105
 294:	88 e1       	ldi	r24, 0x18	; 24
 296:	91 50       	subi	r25, 0x01	; 1
 298:	20 40       	sbci	r18, 0x00	; 0
 29a:	80 40       	sbci	r24, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <main+0x170>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <main+0x17a>
 2a0:	00 00       	nop
				_delay_ms(500);
				PORTB &= ~(1 << PORTB4);
 2a2:	85 b1       	in	r24, 0x05	; 5
 2a4:	8f 7e       	andi	r24, 0xEF	; 239
 2a6:	85 b9       	out	0x05, r24	; 5
				PORTB &= ~(1 << PORTB3);
 2a8:	85 b1       	in	r24, 0x05	; 5
 2aa:	87 7f       	andi	r24, 0xF7	; 247
 2ac:	85 b9       	out	0x05, r24	; 5
 2ae:	9f ef       	ldi	r25, 0xFF	; 255
 2b0:	29 e6       	ldi	r18, 0x69	; 105
 2b2:	88 e1       	ldi	r24, 0x18	; 24
 2b4:	91 50       	subi	r25, 0x01	; 1
 2b6:	20 40       	sbci	r18, 0x00	; 0
 2b8:	80 40       	sbci	r24, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0x18e>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0x198>
 2be:	00 00       	nop
 2c0:	51 cf       	rjmp	.-350    	; 0x164 <main+0x3e>
				_delay_ms(500);
				break;
				
			default:
				PORTB &= ~(1 << PORTB3);
 2c2:	85 b1       	in	r24, 0x05	; 5
 2c4:	87 7f       	andi	r24, 0xF7	; 247
 2c6:	85 b9       	out	0x05, r24	; 5
				PORTB &= ~(1 << PORTB4);
 2c8:	85 b1       	in	r24, 0x05	; 5
 2ca:	8f 7e       	andi	r24, 0xEF	; 239
 2cc:	85 b9       	out	0x05, r24	; 5
				break;
 2ce:	4a cf       	rjmp	.-364    	; 0x164 <main+0x3e>

000002d0 <__vector_1>:
	PORTD |= (1<<DDD3)|(1<<DDD4);		//PD3 y PD5 se inicializan en 0

	PCMSK2 |= (1<<DDD3)|(1<<DDD4);
	PCICR |= (1<<PCIE2);
}
ISR(INT0_vect)	{
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
	state++;
 2de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
 2e2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <state+0x1>
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
 2ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
	if (state == 5) {
 2f0:	05 97       	sbiw	r24, 0x05	; 5
 2f2:	21 f4       	brne	.+8      	; 0x2fc <__vector_1+0x2c>
		 state = 0;
 2f4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state+0x1>
 2f8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
	}
}
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <__vector_5>:
ISR(PCINT2_vect) {
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	2f 93       	push	r18
 31a:	3f 93       	push	r19
 31c:	4f 93       	push	r20
 31e:	5f 93       	push	r21
 320:	6f 93       	push	r22
 322:	7f 93       	push	r23
 324:	8f 93       	push	r24
 326:	9f 93       	push	r25
 328:	af 93       	push	r26
 32a:	bf 93       	push	r27
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31
	
	switch(state){
 334:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
 338:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <state+0x1>
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	91 05       	cpc	r25, r1
 340:	21 f0       	breq	.+8      	; 0x34a <__vector_5+0x40>
 342:	02 97       	sbiw	r24, 0x02	; 2
 344:	09 f4       	brne	.+2      	; 0x348 <__vector_5+0x3e>
 346:	c2 c0       	rjmp	.+388    	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 348:	43 c1       	rjmp	.+646    	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
		
		case 1:
		if(flag ==0){
 34a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 34e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 352:	89 2b       	or	r24, r25
 354:	59 f5       	brne	.+86     	; 0x3ac <__vector_5+0xa2>
			if((PIND & (1<<PIND3))==0){
 356:	4b 99       	sbic	0x09, 3	; 9
 358:	29 c0       	rjmp	.+82     	; 0x3ac <__vector_5+0xa2>
				eeprom_write_byte((uint8_t*)0x00, adcRead(0));
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 360:	68 2f       	mov	r22, r24
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 5f 06 	call	0xcbe	; 0xcbe <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)0x01, adcRead(1));
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 370:	68 2f       	mov	r22, r24
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 5f 06 	call	0xcbe	; 0xcbe <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)0x02, adcRead(2));
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 380:	68 2f       	mov	r22, r24
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 5f 06 	call	0xcbe	; 0xcbe <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)0x03, adcRead(3));
 38a:	83 e0       	ldi	r24, 0x03	; 3
 38c:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 390:	68 2f       	mov	r22, r24
 392:	83 e0       	ldi	r24, 0x03	; 3
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 5f 06 	call	0xcbe	; 0xcbe <eeprom_write_byte>
				flag++;
 39a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 39e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
		}
		if(flag	== 1){
 3ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	59 f5       	brne	.+86     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
			if((PIND & (1<<PIND3))==0){
 3b8:	4b 99       	sbic	0x09, 3	; 9
 3ba:	29 c0       	rjmp	.+82     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
				eeprom_write_byte((uint8_t*)0x04, adcRead(0));
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 3c2:	68 2f       	mov	r22, r24
 3c4:	84 e0       	ldi	r24, 0x04	; 4
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)0x05, adcRead(1));
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 3d2:	68 2f       	mov	r22, r24
 3d4:	85 e0       	ldi	r24, 0x05	; 5
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)0x06, adcRead(2));
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 3e2:	68 2f       	mov	r22, r24
 3e4:	86 e0       	ldi	r24, 0x06	; 6
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)0x07, adcRead(3));
 3ec:	83 e0       	ldi	r24, 0x03	; 3
 3ee:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 3f2:	68 2f       	mov	r22, r24
 3f4:	87 e0       	ldi	r24, 0x07	; 7
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <eeprom_write_byte>
				flag++;
 3fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 400:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 40a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
		}
		if(flag == 2){
 40e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 412:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 416:	02 97       	sbiw	r24, 0x02	; 2
 418:	59 f5       	brne	.+86     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
			if((PIND & (1<<PIND3))==0){
 41a:	4b 99       	sbic	0x09, 3	; 9
 41c:	29 c0       	rjmp	.+82     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
				eeprom_write_byte((uint8_t*)0x08, adcRead(0));
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 424:	68 2f       	mov	r22, r24
 426:	88 e0       	ldi	r24, 0x08	; 8
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)0x09, adcRead(1));
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 434:	68 2f       	mov	r22, r24
 436:	89 e0       	ldi	r24, 0x09	; 9
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)0x0A, adcRead(2));
 43e:	82 e0       	ldi	r24, 0x02	; 2
 440:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 444:	68 2f       	mov	r22, r24
 446:	8a e0       	ldi	r24, 0x0A	; 10
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)0x0B, adcRead(3));
 44e:	83 e0       	ldi	r24, 0x03	; 3
 450:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 454:	68 2f       	mov	r22, r24
 456:	8b e0       	ldi	r24, 0x0B	; 11
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <eeprom_write_byte>
				flag++;
 45e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 462:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 466:	01 96       	adiw	r24, 0x01	; 1
 468:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 46c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
		}
		if(flag == 3){
 470:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 474:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 478:	03 97       	sbiw	r24, 0x03	; 3
 47a:	09 f0       	breq	.+2      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 47c:	a9 c0       	rjmp	.+338    	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
			if((PIND & (1<<PIND3))==0){
 47e:	4b 99       	sbic	0x09, 3	; 9
 480:	a7 c0       	rjmp	.+334    	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
				eeprom_write_byte((uint8_t*)0x0C, adcRead(0));
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 488:	68 2f       	mov	r22, r24
 48a:	8c e0       	ldi	r24, 0x0C	; 12
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)0x0D, adcRead(1));
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 498:	68 2f       	mov	r22, r24
 49a:	8d e0       	ldi	r24, 0x0D	; 13
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)0x0E, adcRead(2));
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 4a8:	68 2f       	mov	r22, r24
 4aa:	8e e0       	ldi	r24, 0x0E	; 14
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 5f 06 	call	0xcbe	; 0xcbe <eeprom_write_byte>
				eeprom_write_byte((uint8_t*)0x0F, adcRead(3));
 4b2:	83 e0       	ldi	r24, 0x03	; 3
 4b4:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 4b8:	68 2f       	mov	r22, r24
 4ba:	8f e0       	ldi	r24, 0x0F	; 15
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 5f 06 	call	0xcbe	; 0xcbe <eeprom_write_byte>
				flag = 0;
 4c2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4c6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 4ca:	82 c0       	rjmp	.+260    	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
			}
		}
		break;
		case 2:
		
			if((PIND & (1<<PIND3))==0){
 4cc:	4b 99       	sbic	0x09, 3	; 9
 4ce:	80 c0       	rjmp	.+256    	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
				//_delay_ms(10);
				OCR1A = eeprom_read_byte((uint8_t*)0x00);
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 57 06 	call	0xcae	; 0xcae <eeprom_read_byte>
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	08 e8       	ldi	r16, 0x88	; 136
 4dc:	10 e0       	ldi	r17, 0x00	; 0
 4de:	f8 01       	movw	r30, r16
 4e0:	91 83       	std	Z+1, r25	; 0x01
 4e2:	80 83       	st	Z, r24
				OCR1B = eeprom_read_byte((uint8_t*)0x01);
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 57 06 	call	0xcae	; 0xcae <eeprom_read_byte>
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	ca e8       	ldi	r28, 0x8A	; 138
 4f0:	d0 e0       	ldi	r29, 0x00	; 0
 4f2:	99 83       	std	Y+1, r25	; 0x01
 4f4:	88 83       	st	Y, r24
				OCR0A = eeprom_read_byte((uint8_t*)0x02);
 4f6:	82 e0       	ldi	r24, 0x02	; 2
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 57 06 	call	0xcae	; 0xcae <eeprom_read_byte>
 4fe:	87 bd       	out	0x27, r24	; 39
				OCR0B = eeprom_read_byte((uint8_t*)0x03);
 500:	83 e0       	ldi	r24, 0x03	; 3
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 57 06 	call	0xcae	; 0xcae <eeprom_read_byte>
 508:	88 bd       	out	0x28, r24	; 40
 50a:	8f e3       	ldi	r24, 0x3F	; 63
 50c:	9c e9       	ldi	r25, 0x9C	; 156
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	f1 f7       	brne	.-4      	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
 512:	00 c0       	rjmp	.+0      	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
 514:	00 00       	nop
				_delay_ms(10);
				OCR1A = eeprom_read_byte((uint8_t*)0x04);
 516:	84 e0       	ldi	r24, 0x04	; 4
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 57 06 	call	0xcae	; 0xcae <eeprom_read_byte>
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	f8 01       	movw	r30, r16
 522:	91 83       	std	Z+1, r25	; 0x01
 524:	80 83       	st	Z, r24
				OCR1B = eeprom_read_byte((uint8_t*)0x05);
 526:	85 e0       	ldi	r24, 0x05	; 5
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 57 06 	call	0xcae	; 0xcae <eeprom_read_byte>
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	99 83       	std	Y+1, r25	; 0x01
 532:	88 83       	st	Y, r24
				OCR0A = eeprom_read_byte((uint8_t*)0x06);
 534:	86 e0       	ldi	r24, 0x06	; 6
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 57 06 	call	0xcae	; 0xcae <eeprom_read_byte>
 53c:	87 bd       	out	0x27, r24	; 39
				OCR0B = eeprom_read_byte((uint8_t*)0x07);
 53e:	87 e0       	ldi	r24, 0x07	; 7
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 57 06 	call	0xcae	; 0xcae <eeprom_read_byte>
 546:	88 bd       	out	0x28, r24	; 40
 548:	8f e3       	ldi	r24, 0x3F	; 63
 54a:	9c e9       	ldi	r25, 0x9C	; 156
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
 550:	00 c0       	rjmp	.+0      	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
 552:	00 00       	nop
				_delay_ms(10);
				OCR1A = eeprom_read_byte((uint8_t*)0x08);
 554:	88 e0       	ldi	r24, 0x08	; 8
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 57 06 	call	0xcae	; 0xcae <eeprom_read_byte>
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	f8 01       	movw	r30, r16
 560:	91 83       	std	Z+1, r25	; 0x01
 562:	80 83       	st	Z, r24
				OCR1B = eeprom_read_byte((uint8_t*)0x09);
 564:	89 e0       	ldi	r24, 0x09	; 9
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 57 06 	call	0xcae	; 0xcae <eeprom_read_byte>
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	99 83       	std	Y+1, r25	; 0x01
 570:	88 83       	st	Y, r24
				OCR0A = eeprom_read_byte((uint8_t*)0x0A);
 572:	8a e0       	ldi	r24, 0x0A	; 10
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0e 94 57 06 	call	0xcae	; 0xcae <eeprom_read_byte>
 57a:	87 bd       	out	0x27, r24	; 39
				OCR0B = eeprom_read_byte((uint8_t*)0x0B);
 57c:	8b e0       	ldi	r24, 0x0B	; 11
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 57 06 	call	0xcae	; 0xcae <eeprom_read_byte>
 584:	88 bd       	out	0x28, r24	; 40
 586:	8f e3       	ldi	r24, 0x3F	; 63
 588:	9c e9       	ldi	r25, 0x9C	; 156
 58a:	01 97       	sbiw	r24, 0x01	; 1
 58c:	f1 f7       	brne	.-4      	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
 590:	00 00       	nop
				_delay_ms(10);
				OCR1A = eeprom_read_byte((uint8_t*)0x0C);
 592:	8c e0       	ldi	r24, 0x0C	; 12
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 57 06 	call	0xcae	; 0xcae <eeprom_read_byte>
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	f8 01       	movw	r30, r16
 59e:	91 83       	std	Z+1, r25	; 0x01
 5a0:	80 83       	st	Z, r24
				OCR1B = eeprom_read_byte((uint8_t*)0x0D);
 5a2:	8d e0       	ldi	r24, 0x0D	; 13
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	0e 94 57 06 	call	0xcae	; 0xcae <eeprom_read_byte>
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	99 83       	std	Y+1, r25	; 0x01
 5ae:	88 83       	st	Y, r24
				OCR0A = eeprom_read_byte((uint8_t*)0x0E);
 5b0:	8e e0       	ldi	r24, 0x0E	; 14
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 57 06 	call	0xcae	; 0xcae <eeprom_read_byte>
 5b8:	87 bd       	out	0x27, r24	; 39
				OCR0B = eeprom_read_byte((uint8_t*)0x0F);
 5ba:	8f e0       	ldi	r24, 0x0F	; 15
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 57 06 	call	0xcae	; 0xcae <eeprom_read_byte>
 5c2:	88 bd       	out	0x28, r24	; 40
 5c4:	8f e3       	ldi	r24, 0x3F	; 63
 5c6:	9c e9       	ldi	r25, 0x9C	; 156
 5c8:	01 97       	sbiw	r24, 0x01	; 1
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <__EEPROM_REGION_LENGTH__+0x1ce>
 5ce:	00 00       	nop
				_delay_ms(10);
			}
	}//state
 5d0:	ff 91       	pop	r31
 5d2:	ef 91       	pop	r30
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	bf 91       	pop	r27
 5da:	af 91       	pop	r26
 5dc:	9f 91       	pop	r25
 5de:	8f 91       	pop	r24
 5e0:	7f 91       	pop	r23
 5e2:	6f 91       	pop	r22
 5e4:	5f 91       	pop	r21
 5e6:	4f 91       	pop	r20
 5e8:	3f 91       	pop	r19
 5ea:	2f 91       	pop	r18
 5ec:	1f 91       	pop	r17
 5ee:	0f 91       	pop	r16
 5f0:	0f 90       	pop	r0
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	0f 90       	pop	r0
 5f6:	1f 90       	pop	r1
 5f8:	18 95       	reti

000005fa <PWM_init>:
#include "ServoControl.h"

void PWM_init(void){
	// PB1 | PB2
	DDRB |= ( 1 << DDB2)|(1 << DDB1);
 5fa:	84 b1       	in	r24, 0x04	; 4
 5fc:	86 60       	ori	r24, 0x06	; 6
 5fe:	84 b9       	out	0x04, r24	; 4
	TCNT1 = 0; // reset
 600:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 604:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	ICR1 = 39999; // TOP
 608:	8f e3       	ldi	r24, 0x3F	; 63
 60a:	9c e9       	ldi	r25, 0x9C	; 156
 60c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 610:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	TCCR1A =  (1 << COM1A1) | (1 << COM1B1) | (0 << COM1A0) ; // low --> Compare Match
 614:	e0 e8       	ldi	r30, 0x80	; 128
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	80 ea       	ldi	r24, 0xA0	; 160
 61a:	80 83       	st	Z, r24
	TCCR1A |=  (1 << WGM11) | (0 << WGM10) ; // Fast PWM TOP ICR1
 61c:	80 81       	ld	r24, Z
 61e:	82 60       	ori	r24, 0x02	; 2
 620:	80 83       	st	Z, r24
	TCCR1B = (1 << WGM13) | (1 << WGM12); // Fast PWM TOP ICR1
 622:	e1 e8       	ldi	r30, 0x81	; 129
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	88 e1       	ldi	r24, 0x18	; 24
 628:	80 83       	st	Z, r24
	TCCR1B |= (0 << CS12) | (1 << CS11) | ( 0 << CS10 ); // Prescaler 8
 62a:	80 81       	ld	r24, Z
 62c:	82 60       	ori	r24, 0x02	; 2
 62e:	80 83       	st	Z, r24
 630:	08 95       	ret

00000632 <PWM0_init>:
	OCR1B = map(adc_Value, 0, 1023, 2800, 4000);
}

void PWM0_init(void){
	// PD5 | PD6
	DDRD |= (1 << DDD6)|(1 << DDD5);
 632:	8a b1       	in	r24, 0x0a	; 10
 634:	80 66       	ori	r24, 0x60	; 96
 636:	8a b9       	out	0x0a, r24	; 10
	TCCR0A |= (1 << WGM01)|(1 << WGM00); //PWM MODO FAST
 638:	84 b5       	in	r24, 0x24	; 36
 63a:	83 60       	ori	r24, 0x03	; 3
 63c:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A1);//PWM NO INVERTIDO A
 63e:	84 b5       	in	r24, 0x24	; 36
 640:	80 68       	ori	r24, 0x80	; 128
 642:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0B1);//PWM NO INVERTIDO B
 644:	84 b5       	in	r24, 0x24	; 36
 646:	80 62       	ori	r24, 0x20	; 32
 648:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02)|(1 << CS00); //prescaler 1024
 64a:	85 b5       	in	r24, 0x25	; 37
 64c:	85 60       	ori	r24, 0x05	; 5
 64e:	85 bd       	out	0x25, r24	; 37
 650:	08 95       	ret

00000652 <map>:
}

void servo_writeD(float adc_Value){
	OCR0B = map(adc_Value, 0, 1023, 30, 50);
}
float map(float x, float in_min, float in_max, float out_min, float out_max){
 652:	4f 92       	push	r4
 654:	5f 92       	push	r5
 656:	6f 92       	push	r6
 658:	7f 92       	push	r7
 65a:	af 92       	push	r10
 65c:	bf 92       	push	r11
 65e:	cf 92       	push	r12
 660:	df 92       	push	r13
 662:	ef 92       	push	r14
 664:	ff 92       	push	r15
 666:	0f 93       	push	r16
 668:	1f 93       	push	r17
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
 672:	28 97       	sbiw	r28, 0x08	; 8
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	f8 94       	cli
 678:	de bf       	out	0x3e, r29	; 62
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	cd bf       	out	0x3d, r28	; 61
 67e:	29 01       	movw	r4, r18
 680:	3a 01       	movw	r6, r20
 682:	ed 82       	std	Y+5, r14	; 0x05
 684:	fe 82       	std	Y+6, r15	; 0x06
 686:	0f 83       	std	Y+7, r16	; 0x07
 688:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
 68a:	0e 94 4e 04 	call	0x89c	; 0x89c <__subsf3>
 68e:	69 83       	std	Y+1, r22	; 0x01
 690:	7a 83       	std	Y+2, r23	; 0x02
 692:	8b 83       	std	Y+3, r24	; 0x03
 694:	9c 83       	std	Y+4, r25	; 0x04
 696:	a6 01       	movw	r20, r12
 698:	95 01       	movw	r18, r10
 69a:	69 8d       	ldd	r22, Y+25	; 0x19
 69c:	7a 8d       	ldd	r23, Y+26	; 0x1a
 69e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 6a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
 6a2:	0e 94 4e 04 	call	0x89c	; 0x89c <__subsf3>
 6a6:	9b 01       	movw	r18, r22
 6a8:	ac 01       	movw	r20, r24
 6aa:	69 81       	ldd	r22, Y+1	; 0x01
 6ac:	7a 81       	ldd	r23, Y+2	; 0x02
 6ae:	8b 81       	ldd	r24, Y+3	; 0x03
 6b0:	9c 81       	ldd	r25, Y+4	; 0x04
 6b2:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__mulsf3>
 6b6:	69 83       	std	Y+1, r22	; 0x01
 6b8:	7a 83       	std	Y+2, r23	; 0x02
 6ba:	8b 83       	std	Y+3, r24	; 0x03
 6bc:	9c 83       	std	Y+4, r25	; 0x04
 6be:	a3 01       	movw	r20, r6
 6c0:	92 01       	movw	r18, r4
 6c2:	c8 01       	movw	r24, r16
 6c4:	b7 01       	movw	r22, r14
 6c6:	0e 94 4e 04 	call	0x89c	; 0x89c <__subsf3>
 6ca:	9b 01       	movw	r18, r22
 6cc:	ac 01       	movw	r20, r24
 6ce:	69 81       	ldd	r22, Y+1	; 0x01
 6d0:	7a 81       	ldd	r23, Y+2	; 0x02
 6d2:	8b 81       	ldd	r24, Y+3	; 0x03
 6d4:	9c 81       	ldd	r25, Y+4	; 0x04
 6d6:	0e 94 bb 04 	call	0x976	; 0x976 <__divsf3>
 6da:	9b 01       	movw	r18, r22
 6dc:	ac 01       	movw	r20, r24
 6de:	c6 01       	movw	r24, r12
 6e0:	b5 01       	movw	r22, r10
 6e2:	0e 94 4f 04 	call	0x89e	; 0x89e <__addsf3>
 6e6:	28 96       	adiw	r28, 0x08	; 8
 6e8:	0f b6       	in	r0, 0x3f	; 63
 6ea:	f8 94       	cli
 6ec:	de bf       	out	0x3e, r29	; 62
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	cd bf       	out	0x3d, r28	; 61
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	1f 91       	pop	r17
 6f8:	0f 91       	pop	r16
 6fa:	ff 90       	pop	r15
 6fc:	ef 90       	pop	r14
 6fe:	df 90       	pop	r13
 700:	cf 90       	pop	r12
 702:	bf 90       	pop	r11
 704:	af 90       	pop	r10
 706:	7f 90       	pop	r7
 708:	6f 90       	pop	r6
 70a:	5f 90       	pop	r5
 70c:	4f 90       	pop	r4
 70e:	08 95       	ret

00000710 <servo_writeA>:
	TCCR1A =  (1 << COM1A1) | (1 << COM1B1) | (0 << COM1A0) ; // low --> Compare Match
	TCCR1A |=  (1 << WGM11) | (0 << WGM10) ; // Fast PWM TOP ICR1
	TCCR1B = (1 << WGM13) | (1 << WGM12); // Fast PWM TOP ICR1
	TCCR1B |= (0 << CS12) | (1 << CS11) | ( 0 << CS10 ); // Prescaler 8
}
void servo_writeA(float adc_Value){
 710:	af 92       	push	r10
 712:	bf 92       	push	r11
 714:	cf 92       	push	r12
 716:	df 92       	push	r13
 718:	ef 92       	push	r14
 71a:	ff 92       	push	r15
 71c:	0f 93       	push	r16
 71e:	1f 93       	push	r17
	OCR1A = map(adc_Value, 0, 1023, 1000, 2000);
 720:	24 e4       	ldi	r18, 0x44	; 68
 722:	2f 93       	push	r18
 724:	2a ef       	ldi	r18, 0xFA	; 250
 726:	2f 93       	push	r18
 728:	1f 92       	push	r1
 72a:	1f 92       	push	r1
 72c:	0f 2e       	mov	r0, r31
 72e:	a1 2c       	mov	r10, r1
 730:	b1 2c       	mov	r11, r1
 732:	fa e7       	ldi	r31, 0x7A	; 122
 734:	cf 2e       	mov	r12, r31
 736:	f4 e4       	ldi	r31, 0x44	; 68
 738:	df 2e       	mov	r13, r31
 73a:	f0 2d       	mov	r31, r0
 73c:	e1 2c       	mov	r14, r1
 73e:	10 ec       	ldi	r17, 0xC0	; 192
 740:	f1 2e       	mov	r15, r17
 742:	0f e7       	ldi	r16, 0x7F	; 127
 744:	14 e4       	ldi	r17, 0x44	; 68
 746:	20 e0       	ldi	r18, 0x00	; 0
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	a9 01       	movw	r20, r18
 74c:	0e 94 29 03 	call	0x652	; 0x652 <map>
 750:	0f 90       	pop	r0
 752:	0f 90       	pop	r0
 754:	0f 90       	pop	r0
 756:	0f 90       	pop	r0
 758:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fixunssfsi>
 75c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 760:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 764:	1f 91       	pop	r17
 766:	0f 91       	pop	r16
 768:	ff 90       	pop	r15
 76a:	ef 90       	pop	r14
 76c:	df 90       	pop	r13
 76e:	cf 90       	pop	r12
 770:	bf 90       	pop	r11
 772:	af 90       	pop	r10
 774:	08 95       	ret

00000776 <servo_writeB>:
void servo_writeB(float adc_Value){
 776:	af 92       	push	r10
 778:	bf 92       	push	r11
 77a:	cf 92       	push	r12
 77c:	df 92       	push	r13
 77e:	ef 92       	push	r14
 780:	ff 92       	push	r15
 782:	0f 93       	push	r16
 784:	1f 93       	push	r17
	OCR1B = map(adc_Value, 0, 1023, 2800, 4000);
 786:	25 e4       	ldi	r18, 0x45	; 69
 788:	2f 93       	push	r18
 78a:	2a e7       	ldi	r18, 0x7A	; 122
 78c:	2f 93       	push	r18
 78e:	1f 92       	push	r1
 790:	1f 92       	push	r1
 792:	0f 2e       	mov	r0, r31
 794:	a1 2c       	mov	r10, r1
 796:	b1 2c       	mov	r11, r1
 798:	ff e2       	ldi	r31, 0x2F	; 47
 79a:	cf 2e       	mov	r12, r31
 79c:	f5 e4       	ldi	r31, 0x45	; 69
 79e:	df 2e       	mov	r13, r31
 7a0:	f0 2d       	mov	r31, r0
 7a2:	e1 2c       	mov	r14, r1
 7a4:	10 ec       	ldi	r17, 0xC0	; 192
 7a6:	f1 2e       	mov	r15, r17
 7a8:	0f e7       	ldi	r16, 0x7F	; 127
 7aa:	14 e4       	ldi	r17, 0x44	; 68
 7ac:	20 e0       	ldi	r18, 0x00	; 0
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	a9 01       	movw	r20, r18
 7b2:	0e 94 29 03 	call	0x652	; 0x652 <map>
 7b6:	0f 90       	pop	r0
 7b8:	0f 90       	pop	r0
 7ba:	0f 90       	pop	r0
 7bc:	0f 90       	pop	r0
 7be:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fixunssfsi>
 7c2:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 7c6:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
 7ca:	1f 91       	pop	r17
 7cc:	0f 91       	pop	r16
 7ce:	ff 90       	pop	r15
 7d0:	ef 90       	pop	r14
 7d2:	df 90       	pop	r13
 7d4:	cf 90       	pop	r12
 7d6:	bf 90       	pop	r11
 7d8:	af 90       	pop	r10
 7da:	08 95       	ret

000007dc <servo_writeC>:
	TCCR0A |= (1 << COM0A1);//PWM NO INVERTIDO A
	TCCR0A |= (1 << COM0B1);//PWM NO INVERTIDO B
	TCCR0B |= (1 << CS02)|(1 << CS00); //prescaler 1024
}
	
void servo_writeC(float adc_Value){
 7dc:	af 92       	push	r10
 7de:	bf 92       	push	r11
 7e0:	cf 92       	push	r12
 7e2:	df 92       	push	r13
 7e4:	ef 92       	push	r14
 7e6:	ff 92       	push	r15
 7e8:	0f 93       	push	r16
 7ea:	1f 93       	push	r17
	OCR0A = map(adc_Value, 0, 1023, 6, 50);
 7ec:	22 e4       	ldi	r18, 0x42	; 66
 7ee:	2f 93       	push	r18
 7f0:	28 e4       	ldi	r18, 0x48	; 72
 7f2:	2f 93       	push	r18
 7f4:	1f 92       	push	r1
 7f6:	1f 92       	push	r1
 7f8:	0f 2e       	mov	r0, r31
 7fa:	a1 2c       	mov	r10, r1
 7fc:	b1 2c       	mov	r11, r1
 7fe:	f0 ec       	ldi	r31, 0xC0	; 192
 800:	cf 2e       	mov	r12, r31
 802:	f0 e4       	ldi	r31, 0x40	; 64
 804:	df 2e       	mov	r13, r31
 806:	f0 2d       	mov	r31, r0
 808:	e1 2c       	mov	r14, r1
 80a:	10 ec       	ldi	r17, 0xC0	; 192
 80c:	f1 2e       	mov	r15, r17
 80e:	0f e7       	ldi	r16, 0x7F	; 127
 810:	14 e4       	ldi	r17, 0x44	; 68
 812:	20 e0       	ldi	r18, 0x00	; 0
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	a9 01       	movw	r20, r18
 818:	0e 94 29 03 	call	0x652	; 0x652 <map>
 81c:	0f 90       	pop	r0
 81e:	0f 90       	pop	r0
 820:	0f 90       	pop	r0
 822:	0f 90       	pop	r0
 824:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fixunssfsi>
 828:	67 bd       	out	0x27, r22	; 39
}
 82a:	1f 91       	pop	r17
 82c:	0f 91       	pop	r16
 82e:	ff 90       	pop	r15
 830:	ef 90       	pop	r14
 832:	df 90       	pop	r13
 834:	cf 90       	pop	r12
 836:	bf 90       	pop	r11
 838:	af 90       	pop	r10
 83a:	08 95       	ret

0000083c <servo_writeD>:

void servo_writeD(float adc_Value){
 83c:	af 92       	push	r10
 83e:	bf 92       	push	r11
 840:	cf 92       	push	r12
 842:	df 92       	push	r13
 844:	ef 92       	push	r14
 846:	ff 92       	push	r15
 848:	0f 93       	push	r16
 84a:	1f 93       	push	r17
	OCR0B = map(adc_Value, 0, 1023, 30, 50);
 84c:	22 e4       	ldi	r18, 0x42	; 66
 84e:	2f 93       	push	r18
 850:	28 e4       	ldi	r18, 0x48	; 72
 852:	2f 93       	push	r18
 854:	1f 92       	push	r1
 856:	1f 92       	push	r1
 858:	0f 2e       	mov	r0, r31
 85a:	a1 2c       	mov	r10, r1
 85c:	b1 2c       	mov	r11, r1
 85e:	f0 ef       	ldi	r31, 0xF0	; 240
 860:	cf 2e       	mov	r12, r31
 862:	f1 e4       	ldi	r31, 0x41	; 65
 864:	df 2e       	mov	r13, r31
 866:	f0 2d       	mov	r31, r0
 868:	e1 2c       	mov	r14, r1
 86a:	10 ec       	ldi	r17, 0xC0	; 192
 86c:	f1 2e       	mov	r15, r17
 86e:	0f e7       	ldi	r16, 0x7F	; 127
 870:	14 e4       	ldi	r17, 0x44	; 68
 872:	20 e0       	ldi	r18, 0x00	; 0
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	a9 01       	movw	r20, r18
 878:	0e 94 29 03 	call	0x652	; 0x652 <map>
 87c:	0f 90       	pop	r0
 87e:	0f 90       	pop	r0
 880:	0f 90       	pop	r0
 882:	0f 90       	pop	r0
 884:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fixunssfsi>
 888:	68 bd       	out	0x28, r22	; 40
}
 88a:	1f 91       	pop	r17
 88c:	0f 91       	pop	r16
 88e:	ff 90       	pop	r15
 890:	ef 90       	pop	r14
 892:	df 90       	pop	r13
 894:	cf 90       	pop	r12
 896:	bf 90       	pop	r11
 898:	af 90       	pop	r10
 89a:	08 95       	ret

0000089c <__subsf3>:
 89c:	50 58       	subi	r21, 0x80	; 128

0000089e <__addsf3>:
 89e:	bb 27       	eor	r27, r27
 8a0:	aa 27       	eor	r26, r26
 8a2:	0e 94 66 04 	call	0x8cc	; 0x8cc <__addsf3x>
 8a6:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__fp_round>
 8aa:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fp_pscA>
 8ae:	38 f0       	brcs	.+14     	; 0x8be <__addsf3+0x20>
 8b0:	0e 94 a9 05 	call	0xb52	; 0xb52 <__fp_pscB>
 8b4:	20 f0       	brcs	.+8      	; 0x8be <__addsf3+0x20>
 8b6:	39 f4       	brne	.+14     	; 0x8c6 <__addsf3+0x28>
 8b8:	9f 3f       	cpi	r25, 0xFF	; 255
 8ba:	19 f4       	brne	.+6      	; 0x8c2 <__addsf3+0x24>
 8bc:	26 f4       	brtc	.+8      	; 0x8c6 <__addsf3+0x28>
 8be:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_nan>
 8c2:	0e f4       	brtc	.+2      	; 0x8c6 <__addsf3+0x28>
 8c4:	e0 95       	com	r30
 8c6:	e7 fb       	bst	r30, 7
 8c8:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_inf>

000008cc <__addsf3x>:
 8cc:	e9 2f       	mov	r30, r25
 8ce:	0e 94 c1 05 	call	0xb82	; 0xb82 <__fp_split3>
 8d2:	58 f3       	brcs	.-42     	; 0x8aa <__addsf3+0xc>
 8d4:	ba 17       	cp	r27, r26
 8d6:	62 07       	cpc	r22, r18
 8d8:	73 07       	cpc	r23, r19
 8da:	84 07       	cpc	r24, r20
 8dc:	95 07       	cpc	r25, r21
 8de:	20 f0       	brcs	.+8      	; 0x8e8 <__addsf3x+0x1c>
 8e0:	79 f4       	brne	.+30     	; 0x900 <__stack+0x1>
 8e2:	a6 f5       	brtc	.+104    	; 0x94c <__stack+0x4d>
 8e4:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__fp_zero>
 8e8:	0e f4       	brtc	.+2      	; 0x8ec <__addsf3x+0x20>
 8ea:	e0 95       	com	r30
 8ec:	0b 2e       	mov	r0, r27
 8ee:	ba 2f       	mov	r27, r26
 8f0:	a0 2d       	mov	r26, r0
 8f2:	0b 01       	movw	r0, r22
 8f4:	b9 01       	movw	r22, r18
 8f6:	90 01       	movw	r18, r0
 8f8:	0c 01       	movw	r0, r24
 8fa:	ca 01       	movw	r24, r20
 8fc:	a0 01       	movw	r20, r0
 8fe:	11 24       	eor	r1, r1
 900:	ff 27       	eor	r31, r31
 902:	59 1b       	sub	r21, r25
 904:	99 f0       	breq	.+38     	; 0x92c <__stack+0x2d>
 906:	59 3f       	cpi	r21, 0xF9	; 249
 908:	50 f4       	brcc	.+20     	; 0x91e <__stack+0x1f>
 90a:	50 3e       	cpi	r21, 0xE0	; 224
 90c:	68 f1       	brcs	.+90     	; 0x968 <__stack+0x69>
 90e:	1a 16       	cp	r1, r26
 910:	f0 40       	sbci	r31, 0x00	; 0
 912:	a2 2f       	mov	r26, r18
 914:	23 2f       	mov	r18, r19
 916:	34 2f       	mov	r19, r20
 918:	44 27       	eor	r20, r20
 91a:	58 5f       	subi	r21, 0xF8	; 248
 91c:	f3 cf       	rjmp	.-26     	; 0x904 <__stack+0x5>
 91e:	46 95       	lsr	r20
 920:	37 95       	ror	r19
 922:	27 95       	ror	r18
 924:	a7 95       	ror	r26
 926:	f0 40       	sbci	r31, 0x00	; 0
 928:	53 95       	inc	r21
 92a:	c9 f7       	brne	.-14     	; 0x91e <__stack+0x1f>
 92c:	7e f4       	brtc	.+30     	; 0x94c <__stack+0x4d>
 92e:	1f 16       	cp	r1, r31
 930:	ba 0b       	sbc	r27, r26
 932:	62 0b       	sbc	r22, r18
 934:	73 0b       	sbc	r23, r19
 936:	84 0b       	sbc	r24, r20
 938:	ba f0       	brmi	.+46     	; 0x968 <__stack+0x69>
 93a:	91 50       	subi	r25, 0x01	; 1
 93c:	a1 f0       	breq	.+40     	; 0x966 <__stack+0x67>
 93e:	ff 0f       	add	r31, r31
 940:	bb 1f       	adc	r27, r27
 942:	66 1f       	adc	r22, r22
 944:	77 1f       	adc	r23, r23
 946:	88 1f       	adc	r24, r24
 948:	c2 f7       	brpl	.-16     	; 0x93a <__stack+0x3b>
 94a:	0e c0       	rjmp	.+28     	; 0x968 <__stack+0x69>
 94c:	ba 0f       	add	r27, r26
 94e:	62 1f       	adc	r22, r18
 950:	73 1f       	adc	r23, r19
 952:	84 1f       	adc	r24, r20
 954:	48 f4       	brcc	.+18     	; 0x968 <__stack+0x69>
 956:	87 95       	ror	r24
 958:	77 95       	ror	r23
 95a:	67 95       	ror	r22
 95c:	b7 95       	ror	r27
 95e:	f7 95       	ror	r31
 960:	9e 3f       	cpi	r25, 0xFE	; 254
 962:	08 f0       	brcs	.+2      	; 0x966 <__stack+0x67>
 964:	b0 cf       	rjmp	.-160    	; 0x8c6 <__addsf3+0x28>
 966:	93 95       	inc	r25
 968:	88 0f       	add	r24, r24
 96a:	08 f0       	brcs	.+2      	; 0x96e <__stack+0x6f>
 96c:	99 27       	eor	r25, r25
 96e:	ee 0f       	add	r30, r30
 970:	97 95       	ror	r25
 972:	87 95       	ror	r24
 974:	08 95       	ret

00000976 <__divsf3>:
 976:	0e 94 cf 04 	call	0x99e	; 0x99e <__divsf3x>
 97a:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__fp_round>
 97e:	0e 94 a9 05 	call	0xb52	; 0xb52 <__fp_pscB>
 982:	58 f0       	brcs	.+22     	; 0x99a <__divsf3+0x24>
 984:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fp_pscA>
 988:	40 f0       	brcs	.+16     	; 0x99a <__divsf3+0x24>
 98a:	29 f4       	brne	.+10     	; 0x996 <__divsf3+0x20>
 98c:	5f 3f       	cpi	r21, 0xFF	; 255
 98e:	29 f0       	breq	.+10     	; 0x99a <__divsf3+0x24>
 990:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_inf>
 994:	51 11       	cpse	r21, r1
 996:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__fp_szero>
 99a:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_nan>

0000099e <__divsf3x>:
 99e:	0e 94 c1 05 	call	0xb82	; 0xb82 <__fp_split3>
 9a2:	68 f3       	brcs	.-38     	; 0x97e <__divsf3+0x8>

000009a4 <__divsf3_pse>:
 9a4:	99 23       	and	r25, r25
 9a6:	b1 f3       	breq	.-20     	; 0x994 <__divsf3+0x1e>
 9a8:	55 23       	and	r21, r21
 9aa:	91 f3       	breq	.-28     	; 0x990 <__divsf3+0x1a>
 9ac:	95 1b       	sub	r25, r21
 9ae:	55 0b       	sbc	r21, r21
 9b0:	bb 27       	eor	r27, r27
 9b2:	aa 27       	eor	r26, r26
 9b4:	62 17       	cp	r22, r18
 9b6:	73 07       	cpc	r23, r19
 9b8:	84 07       	cpc	r24, r20
 9ba:	38 f0       	brcs	.+14     	; 0x9ca <__divsf3_pse+0x26>
 9bc:	9f 5f       	subi	r25, 0xFF	; 255
 9be:	5f 4f       	sbci	r21, 0xFF	; 255
 9c0:	22 0f       	add	r18, r18
 9c2:	33 1f       	adc	r19, r19
 9c4:	44 1f       	adc	r20, r20
 9c6:	aa 1f       	adc	r26, r26
 9c8:	a9 f3       	breq	.-22     	; 0x9b4 <__divsf3_pse+0x10>
 9ca:	35 d0       	rcall	.+106    	; 0xa36 <__divsf3_pse+0x92>
 9cc:	0e 2e       	mov	r0, r30
 9ce:	3a f0       	brmi	.+14     	; 0x9de <__divsf3_pse+0x3a>
 9d0:	e0 e8       	ldi	r30, 0x80	; 128
 9d2:	32 d0       	rcall	.+100    	; 0xa38 <__divsf3_pse+0x94>
 9d4:	91 50       	subi	r25, 0x01	; 1
 9d6:	50 40       	sbci	r21, 0x00	; 0
 9d8:	e6 95       	lsr	r30
 9da:	00 1c       	adc	r0, r0
 9dc:	ca f7       	brpl	.-14     	; 0x9d0 <__divsf3_pse+0x2c>
 9de:	2b d0       	rcall	.+86     	; 0xa36 <__divsf3_pse+0x92>
 9e0:	fe 2f       	mov	r31, r30
 9e2:	29 d0       	rcall	.+82     	; 0xa36 <__divsf3_pse+0x92>
 9e4:	66 0f       	add	r22, r22
 9e6:	77 1f       	adc	r23, r23
 9e8:	88 1f       	adc	r24, r24
 9ea:	bb 1f       	adc	r27, r27
 9ec:	26 17       	cp	r18, r22
 9ee:	37 07       	cpc	r19, r23
 9f0:	48 07       	cpc	r20, r24
 9f2:	ab 07       	cpc	r26, r27
 9f4:	b0 e8       	ldi	r27, 0x80	; 128
 9f6:	09 f0       	breq	.+2      	; 0x9fa <__divsf3_pse+0x56>
 9f8:	bb 0b       	sbc	r27, r27
 9fa:	80 2d       	mov	r24, r0
 9fc:	bf 01       	movw	r22, r30
 9fe:	ff 27       	eor	r31, r31
 a00:	93 58       	subi	r25, 0x83	; 131
 a02:	5f 4f       	sbci	r21, 0xFF	; 255
 a04:	3a f0       	brmi	.+14     	; 0xa14 <__divsf3_pse+0x70>
 a06:	9e 3f       	cpi	r25, 0xFE	; 254
 a08:	51 05       	cpc	r21, r1
 a0a:	78 f0       	brcs	.+30     	; 0xa2a <__divsf3_pse+0x86>
 a0c:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_inf>
 a10:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__fp_szero>
 a14:	5f 3f       	cpi	r21, 0xFF	; 255
 a16:	e4 f3       	brlt	.-8      	; 0xa10 <__divsf3_pse+0x6c>
 a18:	98 3e       	cpi	r25, 0xE8	; 232
 a1a:	d4 f3       	brlt	.-12     	; 0xa10 <__divsf3_pse+0x6c>
 a1c:	86 95       	lsr	r24
 a1e:	77 95       	ror	r23
 a20:	67 95       	ror	r22
 a22:	b7 95       	ror	r27
 a24:	f7 95       	ror	r31
 a26:	9f 5f       	subi	r25, 0xFF	; 255
 a28:	c9 f7       	brne	.-14     	; 0xa1c <__divsf3_pse+0x78>
 a2a:	88 0f       	add	r24, r24
 a2c:	91 1d       	adc	r25, r1
 a2e:	96 95       	lsr	r25
 a30:	87 95       	ror	r24
 a32:	97 f9       	bld	r25, 7
 a34:	08 95       	ret
 a36:	e1 e0       	ldi	r30, 0x01	; 1
 a38:	66 0f       	add	r22, r22
 a3a:	77 1f       	adc	r23, r23
 a3c:	88 1f       	adc	r24, r24
 a3e:	bb 1f       	adc	r27, r27
 a40:	62 17       	cp	r22, r18
 a42:	73 07       	cpc	r23, r19
 a44:	84 07       	cpc	r24, r20
 a46:	ba 07       	cpc	r27, r26
 a48:	20 f0       	brcs	.+8      	; 0xa52 <__divsf3_pse+0xae>
 a4a:	62 1b       	sub	r22, r18
 a4c:	73 0b       	sbc	r23, r19
 a4e:	84 0b       	sbc	r24, r20
 a50:	ba 0b       	sbc	r27, r26
 a52:	ee 1f       	adc	r30, r30
 a54:	88 f7       	brcc	.-30     	; 0xa38 <__divsf3_pse+0x94>
 a56:	e0 95       	com	r30
 a58:	08 95       	ret

00000a5a <__fixunssfsi>:
 a5a:	0e 94 c9 05 	call	0xb92	; 0xb92 <__fp_splitA>
 a5e:	88 f0       	brcs	.+34     	; 0xa82 <__fixunssfsi+0x28>
 a60:	9f 57       	subi	r25, 0x7F	; 127
 a62:	98 f0       	brcs	.+38     	; 0xa8a <__fixunssfsi+0x30>
 a64:	b9 2f       	mov	r27, r25
 a66:	99 27       	eor	r25, r25
 a68:	b7 51       	subi	r27, 0x17	; 23
 a6a:	b0 f0       	brcs	.+44     	; 0xa98 <__fixunssfsi+0x3e>
 a6c:	e1 f0       	breq	.+56     	; 0xaa6 <__fixunssfsi+0x4c>
 a6e:	66 0f       	add	r22, r22
 a70:	77 1f       	adc	r23, r23
 a72:	88 1f       	adc	r24, r24
 a74:	99 1f       	adc	r25, r25
 a76:	1a f0       	brmi	.+6      	; 0xa7e <__fixunssfsi+0x24>
 a78:	ba 95       	dec	r27
 a7a:	c9 f7       	brne	.-14     	; 0xa6e <__fixunssfsi+0x14>
 a7c:	14 c0       	rjmp	.+40     	; 0xaa6 <__fixunssfsi+0x4c>
 a7e:	b1 30       	cpi	r27, 0x01	; 1
 a80:	91 f0       	breq	.+36     	; 0xaa6 <__fixunssfsi+0x4c>
 a82:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__fp_zero>
 a86:	b1 e0       	ldi	r27, 0x01	; 1
 a88:	08 95       	ret
 a8a:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__fp_zero>
 a8e:	67 2f       	mov	r22, r23
 a90:	78 2f       	mov	r23, r24
 a92:	88 27       	eor	r24, r24
 a94:	b8 5f       	subi	r27, 0xF8	; 248
 a96:	39 f0       	breq	.+14     	; 0xaa6 <__fixunssfsi+0x4c>
 a98:	b9 3f       	cpi	r27, 0xF9	; 249
 a9a:	cc f3       	brlt	.-14     	; 0xa8e <__fixunssfsi+0x34>
 a9c:	86 95       	lsr	r24
 a9e:	77 95       	ror	r23
 aa0:	67 95       	ror	r22
 aa2:	b3 95       	inc	r27
 aa4:	d9 f7       	brne	.-10     	; 0xa9c <__fixunssfsi+0x42>
 aa6:	3e f4       	brtc	.+14     	; 0xab6 <__fixunssfsi+0x5c>
 aa8:	90 95       	com	r25
 aaa:	80 95       	com	r24
 aac:	70 95       	com	r23
 aae:	61 95       	neg	r22
 ab0:	7f 4f       	sbci	r23, 0xFF	; 255
 ab2:	8f 4f       	sbci	r24, 0xFF	; 255
 ab4:	9f 4f       	sbci	r25, 0xFF	; 255
 ab6:	08 95       	ret

00000ab8 <__floatunsisf>:
 ab8:	e8 94       	clt
 aba:	09 c0       	rjmp	.+18     	; 0xace <__floatsisf+0x12>

00000abc <__floatsisf>:
 abc:	97 fb       	bst	r25, 7
 abe:	3e f4       	brtc	.+14     	; 0xace <__floatsisf+0x12>
 ac0:	90 95       	com	r25
 ac2:	80 95       	com	r24
 ac4:	70 95       	com	r23
 ac6:	61 95       	neg	r22
 ac8:	7f 4f       	sbci	r23, 0xFF	; 255
 aca:	8f 4f       	sbci	r24, 0xFF	; 255
 acc:	9f 4f       	sbci	r25, 0xFF	; 255
 ace:	99 23       	and	r25, r25
 ad0:	a9 f0       	breq	.+42     	; 0xafc <__floatsisf+0x40>
 ad2:	f9 2f       	mov	r31, r25
 ad4:	96 e9       	ldi	r25, 0x96	; 150
 ad6:	bb 27       	eor	r27, r27
 ad8:	93 95       	inc	r25
 ada:	f6 95       	lsr	r31
 adc:	87 95       	ror	r24
 ade:	77 95       	ror	r23
 ae0:	67 95       	ror	r22
 ae2:	b7 95       	ror	r27
 ae4:	f1 11       	cpse	r31, r1
 ae6:	f8 cf       	rjmp	.-16     	; 0xad8 <__floatsisf+0x1c>
 ae8:	fa f4       	brpl	.+62     	; 0xb28 <__floatsisf+0x6c>
 aea:	bb 0f       	add	r27, r27
 aec:	11 f4       	brne	.+4      	; 0xaf2 <__floatsisf+0x36>
 aee:	60 ff       	sbrs	r22, 0
 af0:	1b c0       	rjmp	.+54     	; 0xb28 <__floatsisf+0x6c>
 af2:	6f 5f       	subi	r22, 0xFF	; 255
 af4:	7f 4f       	sbci	r23, 0xFF	; 255
 af6:	8f 4f       	sbci	r24, 0xFF	; 255
 af8:	9f 4f       	sbci	r25, 0xFF	; 255
 afa:	16 c0       	rjmp	.+44     	; 0xb28 <__floatsisf+0x6c>
 afc:	88 23       	and	r24, r24
 afe:	11 f0       	breq	.+4      	; 0xb04 <__floatsisf+0x48>
 b00:	96 e9       	ldi	r25, 0x96	; 150
 b02:	11 c0       	rjmp	.+34     	; 0xb26 <__floatsisf+0x6a>
 b04:	77 23       	and	r23, r23
 b06:	21 f0       	breq	.+8      	; 0xb10 <__floatsisf+0x54>
 b08:	9e e8       	ldi	r25, 0x8E	; 142
 b0a:	87 2f       	mov	r24, r23
 b0c:	76 2f       	mov	r23, r22
 b0e:	05 c0       	rjmp	.+10     	; 0xb1a <__floatsisf+0x5e>
 b10:	66 23       	and	r22, r22
 b12:	71 f0       	breq	.+28     	; 0xb30 <__floatsisf+0x74>
 b14:	96 e8       	ldi	r25, 0x86	; 134
 b16:	86 2f       	mov	r24, r22
 b18:	70 e0       	ldi	r23, 0x00	; 0
 b1a:	60 e0       	ldi	r22, 0x00	; 0
 b1c:	2a f0       	brmi	.+10     	; 0xb28 <__floatsisf+0x6c>
 b1e:	9a 95       	dec	r25
 b20:	66 0f       	add	r22, r22
 b22:	77 1f       	adc	r23, r23
 b24:	88 1f       	adc	r24, r24
 b26:	da f7       	brpl	.-10     	; 0xb1e <__floatsisf+0x62>
 b28:	88 0f       	add	r24, r24
 b2a:	96 95       	lsr	r25
 b2c:	87 95       	ror	r24
 b2e:	97 f9       	bld	r25, 7
 b30:	08 95       	ret

00000b32 <__fp_inf>:
 b32:	97 f9       	bld	r25, 7
 b34:	9f 67       	ori	r25, 0x7F	; 127
 b36:	80 e8       	ldi	r24, 0x80	; 128
 b38:	70 e0       	ldi	r23, 0x00	; 0
 b3a:	60 e0       	ldi	r22, 0x00	; 0
 b3c:	08 95       	ret

00000b3e <__fp_nan>:
 b3e:	9f ef       	ldi	r25, 0xFF	; 255
 b40:	80 ec       	ldi	r24, 0xC0	; 192
 b42:	08 95       	ret

00000b44 <__fp_pscA>:
 b44:	00 24       	eor	r0, r0
 b46:	0a 94       	dec	r0
 b48:	16 16       	cp	r1, r22
 b4a:	17 06       	cpc	r1, r23
 b4c:	18 06       	cpc	r1, r24
 b4e:	09 06       	cpc	r0, r25
 b50:	08 95       	ret

00000b52 <__fp_pscB>:
 b52:	00 24       	eor	r0, r0
 b54:	0a 94       	dec	r0
 b56:	12 16       	cp	r1, r18
 b58:	13 06       	cpc	r1, r19
 b5a:	14 06       	cpc	r1, r20
 b5c:	05 06       	cpc	r0, r21
 b5e:	08 95       	ret

00000b60 <__fp_round>:
 b60:	09 2e       	mov	r0, r25
 b62:	03 94       	inc	r0
 b64:	00 0c       	add	r0, r0
 b66:	11 f4       	brne	.+4      	; 0xb6c <__fp_round+0xc>
 b68:	88 23       	and	r24, r24
 b6a:	52 f0       	brmi	.+20     	; 0xb80 <__fp_round+0x20>
 b6c:	bb 0f       	add	r27, r27
 b6e:	40 f4       	brcc	.+16     	; 0xb80 <__fp_round+0x20>
 b70:	bf 2b       	or	r27, r31
 b72:	11 f4       	brne	.+4      	; 0xb78 <__fp_round+0x18>
 b74:	60 ff       	sbrs	r22, 0
 b76:	04 c0       	rjmp	.+8      	; 0xb80 <__fp_round+0x20>
 b78:	6f 5f       	subi	r22, 0xFF	; 255
 b7a:	7f 4f       	sbci	r23, 0xFF	; 255
 b7c:	8f 4f       	sbci	r24, 0xFF	; 255
 b7e:	9f 4f       	sbci	r25, 0xFF	; 255
 b80:	08 95       	ret

00000b82 <__fp_split3>:
 b82:	57 fd       	sbrc	r21, 7
 b84:	90 58       	subi	r25, 0x80	; 128
 b86:	44 0f       	add	r20, r20
 b88:	55 1f       	adc	r21, r21
 b8a:	59 f0       	breq	.+22     	; 0xba2 <__fp_splitA+0x10>
 b8c:	5f 3f       	cpi	r21, 0xFF	; 255
 b8e:	71 f0       	breq	.+28     	; 0xbac <__fp_splitA+0x1a>
 b90:	47 95       	ror	r20

00000b92 <__fp_splitA>:
 b92:	88 0f       	add	r24, r24
 b94:	97 fb       	bst	r25, 7
 b96:	99 1f       	adc	r25, r25
 b98:	61 f0       	breq	.+24     	; 0xbb2 <__fp_splitA+0x20>
 b9a:	9f 3f       	cpi	r25, 0xFF	; 255
 b9c:	79 f0       	breq	.+30     	; 0xbbc <__fp_splitA+0x2a>
 b9e:	87 95       	ror	r24
 ba0:	08 95       	ret
 ba2:	12 16       	cp	r1, r18
 ba4:	13 06       	cpc	r1, r19
 ba6:	14 06       	cpc	r1, r20
 ba8:	55 1f       	adc	r21, r21
 baa:	f2 cf       	rjmp	.-28     	; 0xb90 <__fp_split3+0xe>
 bac:	46 95       	lsr	r20
 bae:	f1 df       	rcall	.-30     	; 0xb92 <__fp_splitA>
 bb0:	08 c0       	rjmp	.+16     	; 0xbc2 <__fp_splitA+0x30>
 bb2:	16 16       	cp	r1, r22
 bb4:	17 06       	cpc	r1, r23
 bb6:	18 06       	cpc	r1, r24
 bb8:	99 1f       	adc	r25, r25
 bba:	f1 cf       	rjmp	.-30     	; 0xb9e <__fp_splitA+0xc>
 bbc:	86 95       	lsr	r24
 bbe:	71 05       	cpc	r23, r1
 bc0:	61 05       	cpc	r22, r1
 bc2:	08 94       	sec
 bc4:	08 95       	ret

00000bc6 <__fp_zero>:
 bc6:	e8 94       	clt

00000bc8 <__fp_szero>:
 bc8:	bb 27       	eor	r27, r27
 bca:	66 27       	eor	r22, r22
 bcc:	77 27       	eor	r23, r23
 bce:	cb 01       	movw	r24, r22
 bd0:	97 f9       	bld	r25, 7
 bd2:	08 95       	ret

00000bd4 <__mulsf3>:
 bd4:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__mulsf3x>
 bd8:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__fp_round>
 bdc:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fp_pscA>
 be0:	38 f0       	brcs	.+14     	; 0xbf0 <__mulsf3+0x1c>
 be2:	0e 94 a9 05 	call	0xb52	; 0xb52 <__fp_pscB>
 be6:	20 f0       	brcs	.+8      	; 0xbf0 <__mulsf3+0x1c>
 be8:	95 23       	and	r25, r21
 bea:	11 f0       	breq	.+4      	; 0xbf0 <__mulsf3+0x1c>
 bec:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_inf>
 bf0:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_nan>
 bf4:	11 24       	eor	r1, r1
 bf6:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__fp_szero>

00000bfa <__mulsf3x>:
 bfa:	0e 94 c1 05 	call	0xb82	; 0xb82 <__fp_split3>
 bfe:	70 f3       	brcs	.-36     	; 0xbdc <__mulsf3+0x8>

00000c00 <__mulsf3_pse>:
 c00:	95 9f       	mul	r25, r21
 c02:	c1 f3       	breq	.-16     	; 0xbf4 <__mulsf3+0x20>
 c04:	95 0f       	add	r25, r21
 c06:	50 e0       	ldi	r21, 0x00	; 0
 c08:	55 1f       	adc	r21, r21
 c0a:	62 9f       	mul	r22, r18
 c0c:	f0 01       	movw	r30, r0
 c0e:	72 9f       	mul	r23, r18
 c10:	bb 27       	eor	r27, r27
 c12:	f0 0d       	add	r31, r0
 c14:	b1 1d       	adc	r27, r1
 c16:	63 9f       	mul	r22, r19
 c18:	aa 27       	eor	r26, r26
 c1a:	f0 0d       	add	r31, r0
 c1c:	b1 1d       	adc	r27, r1
 c1e:	aa 1f       	adc	r26, r26
 c20:	64 9f       	mul	r22, r20
 c22:	66 27       	eor	r22, r22
 c24:	b0 0d       	add	r27, r0
 c26:	a1 1d       	adc	r26, r1
 c28:	66 1f       	adc	r22, r22
 c2a:	82 9f       	mul	r24, r18
 c2c:	22 27       	eor	r18, r18
 c2e:	b0 0d       	add	r27, r0
 c30:	a1 1d       	adc	r26, r1
 c32:	62 1f       	adc	r22, r18
 c34:	73 9f       	mul	r23, r19
 c36:	b0 0d       	add	r27, r0
 c38:	a1 1d       	adc	r26, r1
 c3a:	62 1f       	adc	r22, r18
 c3c:	83 9f       	mul	r24, r19
 c3e:	a0 0d       	add	r26, r0
 c40:	61 1d       	adc	r22, r1
 c42:	22 1f       	adc	r18, r18
 c44:	74 9f       	mul	r23, r20
 c46:	33 27       	eor	r19, r19
 c48:	a0 0d       	add	r26, r0
 c4a:	61 1d       	adc	r22, r1
 c4c:	23 1f       	adc	r18, r19
 c4e:	84 9f       	mul	r24, r20
 c50:	60 0d       	add	r22, r0
 c52:	21 1d       	adc	r18, r1
 c54:	82 2f       	mov	r24, r18
 c56:	76 2f       	mov	r23, r22
 c58:	6a 2f       	mov	r22, r26
 c5a:	11 24       	eor	r1, r1
 c5c:	9f 57       	subi	r25, 0x7F	; 127
 c5e:	50 40       	sbci	r21, 0x00	; 0
 c60:	9a f0       	brmi	.+38     	; 0xc88 <__mulsf3_pse+0x88>
 c62:	f1 f0       	breq	.+60     	; 0xca0 <__mulsf3_pse+0xa0>
 c64:	88 23       	and	r24, r24
 c66:	4a f0       	brmi	.+18     	; 0xc7a <__mulsf3_pse+0x7a>
 c68:	ee 0f       	add	r30, r30
 c6a:	ff 1f       	adc	r31, r31
 c6c:	bb 1f       	adc	r27, r27
 c6e:	66 1f       	adc	r22, r22
 c70:	77 1f       	adc	r23, r23
 c72:	88 1f       	adc	r24, r24
 c74:	91 50       	subi	r25, 0x01	; 1
 c76:	50 40       	sbci	r21, 0x00	; 0
 c78:	a9 f7       	brne	.-22     	; 0xc64 <__mulsf3_pse+0x64>
 c7a:	9e 3f       	cpi	r25, 0xFE	; 254
 c7c:	51 05       	cpc	r21, r1
 c7e:	80 f0       	brcs	.+32     	; 0xca0 <__mulsf3_pse+0xa0>
 c80:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_inf>
 c84:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__fp_szero>
 c88:	5f 3f       	cpi	r21, 0xFF	; 255
 c8a:	e4 f3       	brlt	.-8      	; 0xc84 <__mulsf3_pse+0x84>
 c8c:	98 3e       	cpi	r25, 0xE8	; 232
 c8e:	d4 f3       	brlt	.-12     	; 0xc84 <__mulsf3_pse+0x84>
 c90:	86 95       	lsr	r24
 c92:	77 95       	ror	r23
 c94:	67 95       	ror	r22
 c96:	b7 95       	ror	r27
 c98:	f7 95       	ror	r31
 c9a:	e7 95       	ror	r30
 c9c:	9f 5f       	subi	r25, 0xFF	; 255
 c9e:	c1 f7       	brne	.-16     	; 0xc90 <__mulsf3_pse+0x90>
 ca0:	fe 2b       	or	r31, r30
 ca2:	88 0f       	add	r24, r24
 ca4:	91 1d       	adc	r25, r1
 ca6:	96 95       	lsr	r25
 ca8:	87 95       	ror	r24
 caa:	97 f9       	bld	r25, 7
 cac:	08 95       	ret

00000cae <eeprom_read_byte>:
 cae:	f9 99       	sbic	0x1f, 1	; 31
 cb0:	fe cf       	rjmp	.-4      	; 0xcae <eeprom_read_byte>
 cb2:	92 bd       	out	0x22, r25	; 34
 cb4:	81 bd       	out	0x21, r24	; 33
 cb6:	f8 9a       	sbi	0x1f, 0	; 31
 cb8:	99 27       	eor	r25, r25
 cba:	80 b5       	in	r24, 0x20	; 32
 cbc:	08 95       	ret

00000cbe <eeprom_write_byte>:
 cbe:	26 2f       	mov	r18, r22

00000cc0 <eeprom_write_r18>:
 cc0:	f9 99       	sbic	0x1f, 1	; 31
 cc2:	fe cf       	rjmp	.-4      	; 0xcc0 <eeprom_write_r18>
 cc4:	1f ba       	out	0x1f, r1	; 31
 cc6:	92 bd       	out	0x22, r25	; 34
 cc8:	81 bd       	out	0x21, r24	; 33
 cca:	20 bd       	out	0x20, r18	; 32
 ccc:	0f b6       	in	r0, 0x3f	; 63
 cce:	f8 94       	cli
 cd0:	fa 9a       	sbi	0x1f, 2	; 31
 cd2:	f9 9a       	sbi	0x1f, 1	; 31
 cd4:	0f be       	out	0x3f, r0	; 63
 cd6:	01 96       	adiw	r24, 0x01	; 1
 cd8:	08 95       	ret

00000cda <_exit>:
 cda:	f8 94       	cli

00000cdc <__stop_program>:
 cdc:	ff cf       	rjmp	.-2      	; 0xcdc <__stop_program>
